package br.com.pedroamarques.estoquista.adaptersimport android.content.Contextimport android.text.TextUtilsimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.TextViewimport androidx.recyclerview.widget.DiffUtilimport androidx.recyclerview.widget.RecyclerViewimport br.com.pedroamarques.estoquista.activities.LeituraActivityimport br.com.pedroamarques.estoquista.databinding.FragmentItemLeituraBindingimport br.com.pedroamarques.estoquista.entities.ItemLeituraimport br.com.pedroamarques.estoquista.helper.Constclass AdapterItensLeitura(context: Context): RecyclerView.Adapter<AdapterItensLeitura.ItemLeituraViewHolder>() {    interface ItemClickListener {        fun clickExcluirItemLeitura(item: ItemLeitura)        fun clickEditarItemLeitura(item: ItemLeitura)        fun atualizaQuantidadeItem(item: ItemLeitura)    }    private var mItensLeitura: ArrayList<ItemLeitura> = ArrayList()    private var layoutInflater: LayoutInflater = context.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater    var itemClickListener: ItemClickListener? = null    private var modoLeitura: Const.Leitor.ModoLeitura? = null    private var permiteEdicao: Boolean = true    private var currentEditTextQtd: TextView? = null    private var currentPosition: Int = -1    private var currentItem: ItemLeitura? = null    class ItemLeituraViewHolder(itemBinding: FragmentItemLeituraBinding) : RecyclerView.ViewHolder(itemBinding.root) {        val textViewCodigoBarras = itemBinding.textViewCodigoBarras        val textViewLote = itemBinding.textViewLote        val textViewQtd = itemBinding.textViewQtd        val btnExcluir = itemBinding.btnExcluir        val btnAdicionaItem = itemBinding.btnAdicionaItem        val btnSubtraiItem = itemBinding.btnSubtraiItem        val textViewMsgErro = itemBinding.textViewMsgErro    }    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ItemLeituraViewHolder {        val itemBinding = FragmentItemLeituraBinding.inflate(layoutInflater, parent, false)        return ItemLeituraViewHolder(itemBinding)    }    override fun getItemCount(): Int {        return mItensLeitura.size    }    override fun onBindViewHolder(holder: ItemLeituraViewHolder, position: Int) {        val itemLeitura = mItensLeitura[position]        if(permiteEdicao) {            holder.btnExcluir.setOnClickListener {                itemClickListener?.clickExcluirItemLeitura(itemLeitura)            }            holder.btnExcluir.setOnFocusChangeListener { _, hasFocus ->                if(hasFocus) {                    // não deve manter foco                    holder.btnExcluir.clearFocus()                }            }            if(holder.btnExcluir.visibility == View.GONE) {                holder.btnExcluir.visibility = View.VISIBLE            }            if (modoLeitura == Const.Leitor.ModoLeitura.Sequencial || !permiteEdicao) {                holder.textViewQtd.setOnClickListener(null)                holder.btnAdicionaItem.setOnClickListener(null)                holder.btnSubtraiItem.setOnClickListener(null)                if(holder.btnSubtraiItem.visibility == View.VISIBLE) {                    holder.btnSubtraiItem.visibility = View.GONE                }                if(holder.btnAdicionaItem.visibility == View.VISIBLE) {                    holder.btnAdicionaItem.visibility = View.GONE                }                if(holder.textViewQtd.isEnabled) {                    holder.textViewQtd.isEnabled = false                }            } else {                holder.textViewQtd.setOnClickListener {                    itemClickListener?.clickEditarItemLeitura(itemLeitura)                }                holder.btnAdicionaItem.setOnClickListener {                    val quantidade = itemLeitura.quantidade + 1                    itemLeitura.quantidade = quantidade                    itemClickListener?.atualizaQuantidadeItem(itemLeitura)                }                holder.btnSubtraiItem.setOnClickListener {                    val quantidade = itemLeitura.quantidade - 1                    if(quantidade < 1) {                        return@setOnClickListener                    }                    itemLeitura.quantidade = quantidade                    itemClickListener?.atualizaQuantidadeItem(itemLeitura)                }                if (itemLeitura.controlaLotes.equals("S", true)) {                    holder.btnSubtraiItem.visibility = View.GONE                    holder.btnAdicionaItem.visibility = View.GONE                    holder.textViewQtd.isEnabled = false                } else {                    if(holder.btnSubtraiItem.visibility == View.GONE) {                        holder.btnSubtraiItem.visibility = View.VISIBLE                    }                    if(holder.btnAdicionaItem.visibility == View.GONE) {                        holder.btnAdicionaItem.visibility = View.VISIBLE                    }                    if(!holder.textViewQtd.isEnabled) {                        holder.textViewQtd.isEnabled = true                    }                }            }        } else {            holder.textViewQtd.setOnClickListener(null)            holder.btnAdicionaItem.setOnClickListener(null)            holder.btnSubtraiItem.setOnClickListener(null)            holder.btnExcluir.setOnClickListener(null)            if(holder.btnExcluir.visibility == View.VISIBLE) {                holder.btnExcluir.visibility = View.GONE            }            if(holder.btnSubtraiItem.visibility == View.VISIBLE) {                holder.btnSubtraiItem.visibility = View.GONE            }            if(holder.btnAdicionaItem.visibility == View.VISIBLE) {                holder.btnAdicionaItem.visibility = View.GONE            }            if(holder.textViewQtd.isEnabled) {                holder.textViewQtd.isEnabled = false            }        }        holder.textViewCodigoBarras.text = itemLeitura.codigoBarras        if (itemLeitura.lote.isNullOrEmpty()) {            holder.textViewLote.visibility = View.GONE        } else {            if (itemLeitura.controlaLotes.equals("S", true)) {                holder.textViewLote.text = "S.: ${itemLeitura.lote}"            } else {                holder.textViewLote.text = "Lot.: ${itemLeitura.lote}"            }            holder.textViewLote.visibility = View.VISIBLE        }        holder.textViewQtd.text = itemLeitura.quantidade.toString()        if (TextUtils.isEmpty(itemLeitura.mensagemErro)) {            holder.textViewMsgErro.visibility = View.GONE        } else {            holder.textViewMsgErro.setText(itemLeitura.mensagemErro)            holder.textViewMsgErro.visibility = View.VISIBLE        }    }    override fun getItemId(position: Int): Long {        return mItensLeitura[position].id    }    fun atualizaLista(newList: ArrayList<ItemLeitura>, newPermiteEdicao: Boolean, newModoLeitura: Const.Leitor.ModoLeitura) {        currentEditTextQtd = null        currentItem = null        currentPosition = -1        if (permiteEdicao != newPermiteEdicao || newModoLeitura != modoLeitura) {            permiteEdicao = newPermiteEdicao            modoLeitura = newModoLeitura            mItensLeitura.clear()            mItensLeitura.addAll(newList)            // recarrega tudo (não tem outra forma nestes casos)            notifyDataSetChanged()        } else {            val diffUtil: DiffUtil.DiffResult = DiffUtil.calculateDiff(DiffCallback(mItensLeitura, newList))            mItensLeitura.clear()            mItensLeitura.addAll(newList)            diffUtil.dispatchUpdatesTo(this)        }    }    private class DiffCallback(oldList: ArrayList<ItemLeitura>, newList: ArrayList<ItemLeitura>): DiffUtil.Callback() {        val mOldList: ArrayList<ItemLeitura> = oldList        val mNewList: ArrayList<ItemLeitura> = newList        override fun areItemsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {            return mOldList[oldItemPosition].id == mNewList[newItemPosition].id        }        override fun getOldListSize(): Int {            return mOldList.size        }        override fun getNewListSize(): Int {            return mNewList.size        }        override fun areContentsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {            val itemOld = mOldList[oldItemPosition]            val itemNew = mNewList[newItemPosition]            return itemNew.codigoBarras == itemOld.codigoBarras &&                    itemNew.lote == itemOld.lote &&                    itemNew.quantidade == itemOld.quantidade        }    }}